テストしやすいGoコードのデザイン
golang.tokyo #2
12 Dec 2016

Taichi Nakashima
@deeeet

* 言いたいこと

Gopherよ，明示的であれ！

* whoami

.image img/deeeet.png 200 _

- *@deeeet* / *@tcnksm* (GitHub)
- [[deeeet.com][http://deeeet.com]]
- A PaaS Dev&Ops (Using go for CLI tool, API, Batch jobs)

* OSS

Tools

- [[https://github.com/tcnksm/gcli][gcli]] - The easy way to build Golang command-line application
- [[https://github.com/tcnksm/ghr][ghr]] - Create Github Release and upload artifacts in parallel

Packages

- [[https://github.com/tcnksm/go-httpstat][go-httpstat]] - Go package for tracing golang HTTP request latency
- [[https://github.com/tcnksm/go-input][go-input]] - Go package for ideal tty prompt
- [[https://github.com/tcnksm/go-latest][go-latest]] - Simple way to check version is latest or not from various sources in Go

* 書きました

.image img/minnanoGo.jpg 500 _

.caption [[https://www.amazon.co.jp/dp/477418392X][みんなのGo言語]]

* テストしやすいGoコードのデザイン

* テストとは何か?

ある関数に入力を与えて期待する出力が得られるかを確認すること

* テストできない?

1. コードが複雑で新しい機能を追加するのが難しい
2. リファクタリングして見通しの良いコードにしよう
3. リファクタリングのためにはテストが必要だ
4. テストを書くのが難しい...
5. リファクタリングできない...
6. 飲みに行こう🍻

* なぜテストしにくいのか?

- 関数の「入力」を変更できない/しにくい
- 関数の「出力」が取り出せない/そもそもない
- 外部への依存を抽象化できていない

* テストできないコードはない

- 問題はテストできない設計やデザインである
- 良いテストを書くことは良いコードを書くことと同じである

* Unitテストが大切

.image img/pyramid.png 300 _

.caption [[https://testing.googleblog.com/2015/04/just-say-no-to-more-end-to-end-tests.html][Just Say No to More End-to-End Tests]]

- Unitテストは速い（単位が小さいため）
- Unitテストは信頼できる（そもそもおかしなものが入り込む余地はない）
- Unitテストは問題を分離できる（どこが問題であるかを即特定できる）

シンプルなUnitテストをしっかり書く/積み上げることが大切である

* 今日の話

（Unit）テストしやすいGolangのコードを書くために，もしくはテストしにくいコードが生まれるのを避けるために自分が普段意識していることを紹介する

* 今日の話

.image img/tweet.png 400 _


* 絶対に観てほしい！

- [[https://speakerdeck.com/mitchellh/advanced-testing-with-go][Advanced Testing with Go]] by @mitchellh
- [[https://peter.bourgon.org/go-best-practices-2016/][Go best practices, six years in]] by @peterbourgon

* 前提

`testing`パッケージで十分である．フレームワークは使わない．

テストのためのフレームワークを使うことは新たなMini language（DSL）を導入することと変わらない．最初にそれを書く人は楽になるかもしれないが新しくプロジェクトに参入してきたひとにはコストにしかならない（Golang以外も学ぶ必要がある）

[[https://golang.org/doc/faq#Packages_Testing][Where is my favorite helper function for testing?]]

* テストしやすいコードとは?

* Table Driven Test

* Table Driven Test

[[https://github.com/golang/go/wiki/TableDrivenTests][TableDrivenTests]]

.code src/table/simple_test.go /^func Add/,/^}/
.code src/table/simple_test.go /^func Test/,/^}/

* Table Driven Test

Golangでテストを書くときはとにかくTable Driven Testを使う

なぜTable Driven Testを使うのか?

- 入力が何で出力に何を期待するかを簡単に理解できる
- 簡単にテストケースを追加することができる

* Table Driven Test (http.Handler)

.code src/table/handler_test.go /^func hello/,/^}/

* Table Driven Test (http.Handler)

.code src/table/handler_test.go /^func Test/,/^}/

* Table Driven Test (Interpreter)

[[https://interpreterbook.com/][Writing An Interpreter In Go]]

.code src/table/compiler_test.go /^func Test/,/^}/

* テストしやすいコードとは?

Table Driven Testの形式に落とし込めるコードである．

「明確な」入力に対して「明確な」出力が得られる．

どれだけ複雑なアプリケーションのコードもTable Driven Testの粒度に分割できる/形式に落とし込むようにするのが大切である．

* テストしにくいコードとは?

* テストしにくいコードとは?

Table Driven Testの形式に落とし込め「ない」コードである．

* なぜTable Driven Testにしにくいのか?

- 関数の「入力」を変更できない/しにくい
- 関数の「出力」が取り出せない/そもそもない
- 外部への依存を抽象化できていない

* 関数の「入力」を変更できない/しにくい

- *コード内での入力*
- コード外からの入力

* 変更できない/しにくいコード内の入力

- グローバル変数

（グローバル変数はどの関数からも参照できる暗黙な入力）

* グローバル変数

テストしにくい例

.code src/global/bad/main.go /START OMIT/,/END OMIT/

様々な設定ファイルをテストしたい場合にどうすればよいか?

* グローバル変数

（無理やりやるなら）`configPath`を上書きすれば良い．

Concurrentにテストを回したいときにどうするの?

* グローバル変数

テストしやすい例

.code src/global/config.go /^func Load/,/^}/

グローバル変数ではなく引数として明示的に渡すようにする．

* グローバル変数

Table Driven Testに落とし込める！

.code src/global/main_test.go /^func Test/,/^}/

* グローバル変数

避けましょう．

* グローバル変数はどこで使うべきか?

（と言っても）使うべきところはある．

自分は（`const`で）デフォルト値の設定にのみ利用する．

かつmain関数でローカル変数に代入しそれを別の関数に明示的に渡すようにする．「入り口を制限して」いろいろなところから参照しないようにする．

.code src/global/main.go /START OMIT/,/END OMIT/

* flagどこに定義するか問題

[[https://robots.thoughtbot.com/where-to-define-command-line-flags-in-go][Where to Define Command-Line Flags in Go]]

flagパッケージはCLIツールを書くときに主に利用する．`flag.String`や`flag.Int`でフラグを定義して`flag.Parse()`を呼ぶのが基本的なRequirementである．

どこに定義するべきか?

* flagどこに定義するか問題

良くない例（... が多く見かける）

.code src/global/flag/bad/main.go /START OMIT/,/END OMIT/

なぜ良くないか? 

.code src/global/flag/bad/main.go /^func Future/,/^}/

`cfgPath`はどこからも参照できてしまう!（将来横着するやつがいるかもしれない）

* flagどこに定義するか問題

良い例

.code src/global/flag/main.go /^func main/,/^}/

main関数内で定義して明示的な入力以外で他の関数から参照できないようにする！

テストしにくいコードが生まれるのを未然に防ぐ．

* なるべく設定可能にする

基本的に設定が変わらなくても変更可能にして「明示的に」渡すようにする．

.code src/global/opt/main.go /^type/,/^}/

このパターンはやりすぎても良い．テストしにくいよりはまし．

デフォルト値をコンストラクタで設定すればよい．

* 関数の「入力」を変更できない/しにくい

- コード内での入力
- *コード外からの入力*

* 変更できない/しにくいコード外からの入力

- 環境変数
- 標準入力
- コマンドライン引数

* 環境変数

テストしにくい例

.code src/input/env/bad/client.go /^func/,/^}/

異なるtokenでテストを行いたい場合はどうすれば良いか?

* 環境変数

（無理やりやるなら）以下のようなヘルパーを準備し環境変数を上書きする．

.code src/input/env/main_test.go /^func set/,/^}/

（Again）Concurrentにテストを回したいときにどうするの?

* 環境変数

テストしやすい例

.code src/input/env/client.go /^func New/,/^}/

関数の中で環境変数を参照しない．引数として明示的に渡すようにする．

* 環境変数

環境変数はグローバル変数と同じである．

テストしやすさを考えたときは使用を避けるべき．

* 環境変数はどこで使うべきか?

（と言っても）[[https://12factor.net/][The Twelve-Factor App]] が述べているように環境変数による設定の変更はPaaS/CaaSアプリケーションのベストプラクディスでもある．

グローバル変数と同様にmain関数でローカル変数に代入しそれを別の関数に明示的に渡すようにする．「入り口を制限する」

.code src/input/env/client.go /^func main/,/^}/

* 標準入力

テストしにくい例

.code src/input/stdin/bad/main.go /^func Ask/,/^}/

様々なユーザの入力に対してテストしたい場合にどうすれば良いか?

* 標準入力

`fmt.Scanln`は「暗黙的に」`os.Stdin`を入力として設定している．

    // Scanln is similar to Scan, but stops scanning at a newline and
    // after the final item there must be a newline or EOF.
    func Scanln(a ...interface{}) (n int, err error) {
        return Fscanln(os.Stdin, a...)
    }

これを切り替え可能にすればユーザの入力をシュミレートできそう．

* 標準入力

テストしやすい例

.code src/input/stdin/main.go /^func Ask/,/^}/

入力を`io.Reader`で切り替え可能にする

* 標準入力

実際mainから使う場合はどうするか? `os.Stdin`を入力として渡す．

.code src/input/stdin/main.go /^func main/,/^}/

* 標準入力

Table Driven Testに落とし込める！

.code src/input/stdin/main_test.go /^func Test/,/^}/

`os.Stdin`の代わりに`*bytes.Buffer`を渡す．

* 標準入力

`os.Stdin`を暗黙的に使うのではなく`io.Reader`を介して明示的に依存として設定する

* 標準入力（参考）

- [[https://github.com/tcnksm/go-input][https://github.com/tcnksm/go-input]]

* コマンドライン引数

（後述）

* テストしやすいデザインの指標

- グローバル変数を避ける
- 環境変数を避ける
- flagはmain関数内で定義する
- （どこからでも参照できてしまう変数の）入力の入り口を制限する
- 変わらない設定もなるべく設定可能にして明示的に入力として渡す
- `os.Stdin`は`io.Reader`を介して明示的に依存として設定する

* テストしにくいコードとは?

- 関数の「入力」を変更できない/しにくい
- *関数の「出力」が取り出せない/そもそもない*
- 外部への依存を抽象化できていない

* 出力が取り出せない

命令型言語では，一見すると数を処理するだけに見える簡単な関数が処理の手間にあなたの家に火をつけたり犬を誘拐したりしないことを保証できません．

「すごいHaskell楽しく学ぼう」より

* 出力が取り出せない

もっともテストしにくい関数はvoid的な（明確な返り値を持たない）関数である．

全ての関数が「明確な」入力と出力を持つように意識する．

void的な関数はなるべくmainだけになるようにする．

* 出力が取り出せない

- ファイル出力
- 標準出力/標準エラー出力
- 終了コード

* ファイル出力

テストしにくい例

.code src/output/file/bad/main.go /^func SaveConfig/,/^}/

様々な`Config`に対して期待する内容が書き込まれているかをテストするにはどうすればよいか?

* ファイル出力

（無理やりやるなら）書き出したファイルを再び開いて内容を読み出せば良い

大量のテストケースを捌きたいときにパフォーマンスが悪くなるけどいいの?

* ファイル出力

テストしやすい例

.code src/output/file/main.go /START OMIT/,/END OMIT/

`io.Writer`を受け取りそこに対して書き込みを行う`save`関数を別途作る．`SaveConfig`はファイルを開き`*os.File`を`save`に渡す．

* ファイル出力

Table Driven Testに落とし込める！

.code src/output/file/main_test.go /^func Test/,/^}/

`*os.File`ではなく`*bytes.Buffer`を渡し`String()`で後から内容を取り出す．

* ファイル出力

ファイルへの書き出しは`io.Writer`で抽象化しておく．

* 標準出力/標準エラー出力

テストしにくい例

.code src/output/stdout/bad/main.go /START OMIT/,/END OMIT/

期待する出力がコンソール表示されているかをテストするにはどうすればいいか?

コンソールへの出力を取り出す...?

* 標準出力/標準エラー出力

`fmt.Printf`は「暗黙的に」`os.Stdout`を出力先として設定している

    // Printf formats according to a format specifier and writes to standard output.
    // It returns the number of bytes written and any write error encountered.
    func Printf(format string, a ...interface{}) (n int, err error) {
        return Fprintf(os.Stdout, format, a...)
    }

これを切り替え可能にすれば出力を取り出せそう．

* 標準出力/標準エラー出力

テストしやすい例

.code src/output/stdout/main.go /START OMIT/,/END OMIT/

実際の書き出し先を`io.Writer`で切り替え可能にする．

* 標準出力/標準エラー出力

実際mainから使う場合はどうするか? `os.Stdout`を設定する．

.code src/output/stdout/main.go /^func main/,/^}/

標準エラー出力に出力したい場合は`os.Stderr`を設定すれば良い．

* 標準出力/標準エラー出力

`os.Stdout`/`os.Stderr`を暗黙的に使うのではなく`io.Writer`を介して明示的に依存として設定する．

* 標準出力/標準エラー出力

やりすぎは良くない．コンソールへの出力が重要な機能である場合にやるべき．

（少なくとも`io.Writer`で抽象化できることは知っておくと良い）

* 終了コード

テストしにくい例

.code src/output/exit/bad/main.go /^func main/,/^}/

期待する終了ステータスが得られているかをテストするにはどうすればいいか?

終了ステータスを取り出す...? 

* 終了コード

（無理やりやるなら）[[http://mattn.kaoriya.net/software/lang/go/20161025113154.htm][golang で終了を確認するテストの書き方]]

* 終了コード

（少し）テストしやすい例

.code src/output/exit/main.go /^func Run/,/^}/

ステータスコードを「返り値として返す」関数を定義する．

ただし今のままでは明確な「入力がない」ため`Run`関数をテストできない．

`Run`の引数は何か?

* 終了コード + コマンドライン引数

テストしやすい例

.code src/output/exit/args/main.go /^func Run/,/^}/

コマンドライン引数を`Run`関数に渡せるようにする．

* 終了コード + コマンドライン引数

実際に使う場合はどうするか?

.code src/output/exit/args/main.go /^func main/,/^}/

入力に`os.Args`（実態は`[]string`）を渡し返り値は`os.Exit`に渡す．

* 終了コード + コマンドライン引数

Table Driven Testに落とし込める！

.code src/output/exit/flags/main_test.go /^func Test/,/^}/

* 終了コード + コマンドライン引数

ただしこれはIntegrationテストに近い．

それよりも内部で呼び出している関数（ここで言うと`process1`や`process2`）のUnitテストをちゃんとやるのが大切である．

* 終了コード

`os.Exit`（もしくはそれを暗黙的に呼ぶ`log.Fatal`）はあまり使うべきではない．

- deferが実行されないため
- コードの出口が多くなりコードを追うのが大変になるため

自分はmain関数でのみ呼ぶ！

処理はmainで始まり（panicしない限り）mainで終わるようになる．可読性も上がる．

* テストしやすいデザインの指標

- void的な関数を避ける（明確な出力を持つべき）
- ファイル出力を`io.Writer`で抽象化する
- `os.Stdout`/`os.Stderr`を`io.Writer`を介して明示的に依存として設定する
- 終了ステータスをテストするのではなくステータスを返す関数を定義する
- `os.Exit`を避ける（mainでのみ使う）

* テストしにくいコードとは?

- 関数の「入力」を変更できない/しにくい
- 関数の「出力」が取り出せない/そもそもない
- *外部への依存を抽象化できていない*

* 外部への依存を抽象化できていない

ある関数は外部のサービスやDBに依存する．それらを常に準備できない場合（e.g., CIサーバー）や準備にコストがかかる場合はテストしにくくなる．

interfaceを使い依存をモック化すればよい!

* interfaceによるモック

テストしにくい例

.code src/interface/bad/main.go /START OMIT/,/END OMIT/

`process`関数はRedisに依存する．Redisなしでテストを行うにはどうすればよいか?

* interfaceによるモック

テストしやすい例

.code src/interface/main.go /^type DB/,/^}/

`DB`というinterfaceを定義する．`Redis`はこのinterfaceを満たす．

* interfaceによるモック

テストしやすい例

.code src/interface/main.go /START OMIT/,/END OMIT/

interfaceを引数として`process`に渡すようにする．

* interfaceによるモック

テストしやすい例

.code src/interface/main_test.go /START OMIT/,/END OMIT/

`DB` interfaceを満たす`TestDB`を定義する．

* interfaceによるモック

テストしやすい例

.code src/interface/main_test.go /^func Test/,/^}/

テストのときはTestDBをprocessに渡す．

これで実際のRedisを準備しなくてもそれ相当の「振る舞い」行うものでテストを回せるようになる．

* interfaceによるモック

実際のDBでテストを行うことも大切である．

以下のように環境変数で実際のDBとモックによるテストの切り替えられるようにしておくとよい（Redisが準備できる場合はその接続先の情報を環境変数で渡す）．

.code src/interface/better/main_test.go /^func test/,/^}/


* interface化する利点

interface化にはモック以外の利点もある．例えばRedis以外のデータストアに切り替えたいときは`DB`interfaceを満たすものを新たに定義するだけで良い．

* まとめ

* まとめ

- グローバル変数を避ける
- 環境変数を避ける
- flagはmain関数内で定義する
- （どこからでも参照できてしまう変数の）入力の入り口を制限する
- 変わらない設定もなるべく設定可能にして明示的に入力として渡す
- `os.Stdin`は`io.Reader`を介して明示的に依存として設定する
- void的な関数を避ける（明確な出力を持つべき）
- ファイル出力を`io.Writer`で抽象化する
- `os.Stdout`/`os.Stderr`を`io.Writer`を介して明示的に依存として設定する
- 終了ステータスをテストするのではなくステータスを返す関数を定義する
- `os.Exit`を避ける（mainでのみ使う）
- interfaceを使いモック化を行う

* まとめ

Gopherよ，明示的であれ！

明示的であることがクリアなコードにつながりそしてテストしやすいコードにつながる！


* 参考文献1

- [[http://deeeet.com/writing/2016/10/25/go-interface-testing/][Golangにおけるinterfaceをつかったテスト技法]]
- [[http://deeeet.com/writing/2014/12/18/golang-cli-test/][Go言語でテストしやすいコマンドラインツールをつくる]]
- [[https://speakerdeck.com/mitchellh/advanced-testing-with-go][Advanced Testing with Go]] 
- [[https://peter.bourgon.org/go-best-practices-2016/][Go best practices, six years in]]
- [[https://talks.golang.org/2014/testing.slide#1][Testing Techniques]]
- [[https://blog.gopheracademy.com/advent-2015/symmetric-api-testing-in-go/][Symmetric API Testing]] 
- [[https://github.com/peterbourgon/go-microservices][Go + microservices]]
- [[https://medium.com/@benbjohnson/structuring-tests-in-go-46ddee7a25c#.t6pxjnsy0][Structuring Tests in Go]] 
- [[https://nathanleclaire.com/blog/2015/10/10/interfaces-and-composition-for-effective-unit-testing-in-golang/][Interfaces and Composition for Effective Unit Testing in Golang]]
- [[https://interpreterbook.com/][Writing An Interpreter In Go]]
- [[https://robots.thoughtbot.com/where-to-define-command-line-flags-in-go][Where to Define Command-Line Flags in Go]]


* 参考文献2

- [[https://8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html][The Clean Architecture]]
- [[https://appliedgo.net/di/][The Clean Architecture incl. the Dependency Rule]]
- [[http://manuel.kiessling.net/2012/09/28/applying-the-clean-architecture-to-go-applications/][Applying The Clean Architecture to Go applications]]
- [[http://fideloper.com/hexagonal-architecture][http://fideloper.com/hexagonal-architecture]]
- [[https://dave.cheney.net/2016/08/20/solid-go-design][SOLID Go Design]] [[https://www.youtube.com/watch?v=zzAdEt3xZ1M][video]]
- [[https://changelog.com/gotime/16][Go Time #16: SOLID Go Design with Dave Cheney | Changelog]]
- [[https://www.youtube.com/watch?v=dKRbsE061u4][RubyConf 2009 - SOLID Ruby by: Jim Weirich]]